---
interface Props {
  class: string;
  isFancy: boolean;
}

const svgW = 640;
const svgH = 220;
const dotGap = 20; // Reduced gap for more dense pattern
const amountOfDots = Math.ceil(svgW / dotGap) * Math.ceil(svgH / dotGap);

const { class: className, isFancy, ...rest } = Astro.props;
---
<article class:list={['card', isFancy ? 'card--fancy' : '', className]} {...rest}>
  <slot />
  {
    isFancy && (
      <svg viewBox={`0 0 ${svgW} ${svgH}`} class="card__bg">
        {Array.from({ length: amountOfDots }).map((_, i) => (
          <circle
            class="card__dot"
            cx={dotGap * (i % Math.ceil(svgW / dotGap))}
            cy={dotGap * Math.floor(i / Math.ceil(svgW / dotGap))}
            r={1.5}
            style={`--rnd: ${Math.random()};`}
            fill="var(--rc-cardDecoration, #4f46e5)"
          />
        ))}
      </svg>
    )
  }
</article>

<style is:global>
  .card {
    position: relative;
    --bg: rgba(17, 24, 39, 0.8);
    --color: #ffffff;
    
    background: var(--bg);
    color: var(--color);
    
    border-radius: 1.5rem;
    min-height: 35rem;
    padding: var(--rs-card-y) var(--rs-card-x);
    box-sizing: border-box;
    
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    transition: all 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
  }
  
  @media (max-width: 500px) {
    .card {
      min-height: 30rem;
    }
  }

  .card + .card {
    margin-top: var(--rs-card-y);
  }

  .card--fancy {
    box-shadow: 
      0 10px 30px rgba(0, 0, 0, 0.1),
      inset 0 0 0 1px rgba(255, 255, 255, 0.1);
    overflow: hidden;
  }

  .card--fancy .h3 {
    margin-top: 1em;
    margin-bottom: 0.8em;
    font-weight: 700;
    background: linear-gradient(45deg, #4f46e5, #7c3aed);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .card__dot {
    animation: pulse 3s ease-in-out infinite alternate;
    animation-delay: calc(var(--rnd) * -4s);
    transform-origin: center;
    transform-box: fill-box;
    opacity: 0.6;
  }

  .card__bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    pointer-events: none;
    opacity: 0.1;
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 0.2;
      transform: scale(calc(0.1 + var(--rnd) * 0.9));
    }
    50% {
      opacity: 0.5;
      transform: scale(calc(0.5 + var(--rnd) * 0.5));
    }
  }
</style>